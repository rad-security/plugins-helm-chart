name: Test Namespace-Based Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'stable/rad-plugins/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'stable/rad-plugins/**'
  workflow_dispatch:

jobs:
  test-namespace-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2

      - name: Create test directories
        run: |
          mkdir -p test-output-{default,release-only,kube-system-only}

      - name: Test default (both namespaces)
        run: |
          helm template stable/rad-plugins \
            --set runtime.enabled=true \
            --output-dir test-output-default
          echo "Default configuration file count: $(find test-output-default -type f | wc -l)"

          # Verify resources are in the release namespace
          if ! grep -q "namespace:" test-output-default/rad-plugins/templates/guard/deployment.yaml; then
            echo "❌ Default configuration missing namespace in guard deployment"
            exit 1
          fi

          # Verify resources are in kube-system namespace
          if ! grep -q "namespace: kube-system" test-output-default/rad-plugins/templates/rbac.yaml; then
            echo "❌ Default configuration missing resources in kube-system namespace"
            exit 1
          fi

          echo "✅ Default configuration test passed"

      - name: Test release namespace only
        run: |
          helm template stable/rad-plugins \
            --set runtime.enabled=true \
            --set rad.deployment.kubeSystem=false \
            --output-dir test-output-release-only
          echo "Release namespace only configuration file count: $(find test-output-release-only -type f | wc -l)"

          # Verify resources are in the release namespace
          if ! grep -q "namespace:" test-output-release-only/rad-plugins/templates/guard/deployment.yaml; then
            echo "❌ Release namespace only configuration missing namespace in guard deployment"
            exit 1
          fi

          # Verify no resources in kube-system namespace by checking RoleBinding to kube-root-ca-reader is not present
          if grep -q "name: rad-guard-kube-root-ca-reader" test-output-release-only/rad-plugins/templates/guard/rbac.yaml; then
            echo "❌ Release namespace only configuration still has resources in kube-system namespace"
            exit 1
          fi

          echo "✅ Release namespace only configuration test passed"

      - name: Test kube-system namespace only
        run: |
          helm template stable/rad-plugins \
            --set runtime.enabled=true \
            --set rad.deployment.releaseNamespace=false \
            --output-dir test-output-kube-system-only
          echo "Kube-system namespace only configuration file count: $(find test-output-kube-system-only -type f | wc -l)"

          # Verify no deployments in release namespace
          if [ -f test-output-kube-system-only/rad-plugins/templates/guard/deployment.yaml ]; then
            echo "❌ Kube-system namespace only configuration still has deployments in release namespace"
            exit 1
          fi

          # Verify no ServiceAccount resource definitions (not just references in subjects)
          if grep -A1 "^kind: ServiceAccount" test-output-kube-system-only/rad-plugins/templates/guard/rbac.yaml; then
            echo "❌ Kube-system namespace only configuration still has ServiceAccount resources in release namespace"
            exit 1
          fi

          # Verify ClusterRoles still exist (they're not namespace-specific)
          found_cluster_role=false
          if grep -q "kind: ClusterRole" test-output-kube-system-only/rad-plugins/templates/guard/rbac.yaml; then
            found_cluster_role=true
          fi
          if [ "$found_cluster_role" != "true" ]; then
            echo "❌ Kube-system namespace only configuration missing cluster roles"
            exit 1
          fi

          # NOTE: We don't check subjects in bindings since they will reference ServiceAccounts in the default namespace
          # when running the test. This is expected behavior when .Release.Namespace resolves to "default"
          # during the helm template command.

          echo "✅ Kube-system namespace only configuration test passed"

      - name: Test runtime PII analyzer
        run: |
          # Test with both namespaces (default)
          helm template stable/rad-plugins \
            --set runtime.enabled=true \
            --set runtime.httpTracingEnabled=true \
            --set runtime.piiAnalyzer.enabled=true \
            --output-dir test-output-pii-default

          # Verify PII analyzer deployed in release namespace
          if [ ! -f test-output-pii-default/rad-plugins/templates/runtime/pii-analyzer-deployment.yaml ]; then
            echo "❌ PII analyzer not rendered in default configuration"
            exit 1
          fi

          # Test with release namespace disabled
          helm template stable/rad-plugins \
            --set runtime.enabled=true \
            --set runtime.httpTracingEnabled=true \
            --set runtime.piiAnalyzer.enabled=true \
            --set rad.deployment.releaseNamespace=false \
            --output-dir test-output-pii-no-release

          # Verify PII analyzer not deployed when release namespace is disabled
          if [ -f test-output-pii-no-release/rad-plugins/templates/runtime/pii-analyzer-deployment.yaml ]; then
            echo "❌ PII analyzer still rendered when release namespace is disabled"
            exit 1
          fi

          echo "✅ PII analyzer test passed"

      - name: Report success
        if: success()
        run: |
          echo "All namespace-based deployment tests passed successfully!"
