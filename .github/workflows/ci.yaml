name: checks

on:
  pull_request:

# Cancel any in-flight jobs for the same PR branch so there's only one active at a time.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: set up python
        uses: actions/setup-python@v5
      - name: install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: pre-commit-install
        run: pre-commit install
      - name: pre-commit install hooks
        run: pre-commit install-hooks
      - name: pre-commit checks
        run: pre-commit run --all-files

  lint:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.2
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1
      - name: Run chart-testing (lint)
        run: ct lint --config test/ct.yaml
      - name: Run helm lint
        run: helm lint stable/rad-plugins

  namespace-deployment:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.2
      - name: Test Namespace-Based Deployment
        run: |
          # Create test directories
          mkdir -p test-output-{default,release-only,kube-system-only}

          # Test default (both namespaces)
          helm template stable/rad-plugins \
            --set guard.enabled=true \
            --set sbom.enabled=true \
            --set sync.enabled=true \
            --set watch.enabled=true \
            --set runtime.enabled=true \
            --set runtime.httpTracingEnabled=true \
            --set runtime.piiAnalyzer.enabled=true \
            --set priorityClass.enabled=true \
            --output-dir test-output-default
          echo "Default configuration file count: $(find test-output-default -type f | wc -l)"
          if ! grep -q "namespace:" test-output-default/rad-plugins/templates/guard/deployment.yaml; then
            echo "❌ Default configuration missing namespace in guard deployment"
            exit 1
          fi
          if ! grep -q "namespace: kube-system" test-output-default/rad-plugins/templates/rbac.yaml; then
            echo "❌ Default configuration missing resources in kube-system namespace"
            exit 1
          fi

          # Test release namespace only
          helm template stable/rad-plugins \
            --set guard.enabled=true \
            --set sbom.enabled=true \
            --set sync.enabled=true \
            --set watch.enabled=true \
            --set runtime.enabled=true \
            --set runtime.httpTracingEnabled=true \
            --set runtime.piiAnalyzer.enabled=true \
            --set priorityClass.enabled=true \
            --set rad.deployment.kubeSystem=false \
            --output-dir test-output-release-only
          if ! grep -q "namespace:" test-output-release-only/rad-plugins/templates/guard/deployment.yaml; then
            echo "❌ Release namespace only configuration missing namespace in guard deployment"
            exit 1
          fi
          if grep -q "name: rad-guard-kube-root-ca-reader" test-output-release-only/rad-plugins/templates/guard/rbac.yaml; then
            echo "❌ Release namespace only configuration still has resources in kube-system namespace"
            exit 1
          fi

          # Test kube-system namespace only
          helm template stable/rad-plugins \
            --set guard.enabled=true \
            --set sbom.enabled=true \
            --set sync.enabled=true \
            --set watch.enabled=true \
            --set runtime.enabled=true \
            --set runtime.httpTracingEnabled=true \
            --set runtime.piiAnalyzer.enabled=true \
            --set priorityClass.enabled=true \
            --set rad.deployment.releaseNamespace=false \
            --output-dir test-output-kube-system-only
          if [ -f test-output-kube-system-only/rad-plugins/templates/guard/deployment.yaml ]; then
            echo "❌ Kube-system namespace only configuration still has deployments in release namespace"
            exit 1
          fi

          # Verify no ServiceAccount resource definitions (not just references in subjects)
          if grep -A1 "^kind: ServiceAccount" test-output-kube-system-only/rad-plugins/templates/guard/rbac.yaml; then
            echo "❌ Kube-system namespace only configuration still has ServiceAccount resources in release namespace"
            exit 1
          fi

          # Verify ClusterRoles for all components are NOT rendered when deployInReleaseNamespace is false
          for component in "guard" "sbom" "sync" "watch" "runtime"; do
            if grep -q "kind: ClusterRole" test-output-kube-system-only/rad-plugins/templates/${component}/rbac.yaml 2>/dev/null; then
              echo "❌ Kube-system namespace only configuration still has ${component} ClusterRole which should only be deployed with release namespace"
              exit 1
            fi
          done

          # Check that rad-proxy-role ClusterRole is not rendered
          if grep -q "kind: ClusterRole" test-output-kube-system-only/rad-plugins/templates/rbac.yaml 2>/dev/null | grep -q "name: rad-proxy-role"; then
            echo "❌ Kube-system namespace only configuration still has rad-proxy-role ClusterRole which should only be deployed with release namespace"
            exit 1
          fi

          # Verify PriorityClass is not rendered
          if grep -q "kind: PriorityClass" test-output-kube-system-only/rad-plugins/templates/priorityclass/priorityclass.yaml 2>/dev/null; then
            echo "❌ Kube-system namespace only configuration still has PriorityClass which should only be deployed with release namespace"
            exit 1
          fi

          # Verify no webhook configurations are rendered
          if grep -q "kind: MutatingWebhookConfiguration\|kind: ValidatingWebhookConfiguration" test-output-kube-system-only/rad-plugins/templates/*/*webhook*.yaml 2>/dev/null; then
            echo "❌ Kube-system namespace only configuration still has webhook configurations which should only be deployed with release namespace"
            exit 1
          fi

          # NOTE: We don't check subjects in bindings since they will reference ServiceAccounts in the default namespace
          # when running the test. This is expected behavior when .Release.Namespace resolves to "default"
          # during the helm template command.

          # Test no namespace deployment
          mkdir -p test-output-no-namespaces
          helm template stable/rad-plugins \
            --set guard.enabled=true \
            --set sbom.enabled=true \
            --set sync.enabled=true \
            --set watch.enabled=true \
            --set runtime.enabled=true \
            --set runtime.httpTracingEnabled=true \
            --set runtime.piiAnalyzer.enabled=true \
            --set priorityClass.enabled=true \
            --set rad.deployment.releaseNamespace=false \
            --set rad.deployment.kubeSystem=false \
            --output-dir test-output-no-namespaces
          file_count=$(find test-output-no-namespaces -name "*.yaml" -type f -not -empty | wc -l)
          echo "No namespaces configuration file count: $file_count"
          if [ "$file_count" -gt 0 ]; then
            echo "Rendered files:"
            find test-output-no-namespaces -name "*.yaml" -type f -not -empty -exec ls -la {} \;
            echo "❌ Resources were rendered when both namespace flags are disabled"
            exit 1
          fi

          # Test PII analyzer
          helm template stable/rad-plugins \
            --set runtime.enabled=true \
            --set runtime.httpTracingEnabled=true \
            --set runtime.piiAnalyzer.enabled=true \
            --set rad.deployment.releaseNamespace=false \
            --output-dir test-output-pii
          if [ -f test-output-pii/rad-plugins/templates/runtime/pii-analyzer-deployment.yaml ]; then
            echo "❌ PII analyzer still rendered when release namespace is disabled"
            exit 1
          fi

          # Test backward compatibility with nil rad.deployment
          cat > backward-compat-values.yaml << EOF
          guard:
            enabled: true
          sbom:
            enabled: true
          sync:
            enabled: true
          watch:
            enabled: true
          runtime:
            enabled: true
            httpTracingEnabled: true
            piiAnalyzer:
              enabled: true
          priorityClass:
            enabled: true
          EOF

          mkdir -p test-output-backward-compat
          helm template stable/rad-plugins -f backward-compat-values.yaml \
            --output-dir test-output-backward-compat

          # Verify resources are deployed to both namespaces (default behavior)
          if ! grep -q "namespace:" test-output-backward-compat/rad-plugins/templates/guard/deployment.yaml; then
            echo "❌ Backward compatibility test failed: missing deployments in release namespace"
            exit 1
          fi

          if ! grep -q "namespace: kube-system" test-output-backward-compat/rad-plugins/templates/rbac.yaml; then
            echo "❌ Backward compatibility test failed: missing resources in kube-system namespace"
            exit 1
          fi

          echo "All namespace-based deployment tests passed successfully!"
